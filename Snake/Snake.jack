class Snake {
  field SnakeGame game;

  field Array segments; // Array of Point objects representing the snake's body
  field int direction; // The current direction of the snake
  field int length; // Current length of the snake

  field int currX;
  field int currY;
  field Point head;
  field Point prevTail;

  field Array histX, histY;  // the history of the snake's movements
  field int histSize;


  constructor Snake new(SnakeGame agame, int startX, int startY, int startLength) {
    var int i;
    var Point temp;

    let length = startLength;
    let segments = Array.new(length);
    let direction = 0; // Assume 0=right, 1=down, 2=left, 3=up as direction codes

    let histSize = 512;
    let histX = Array.new(histSize);
    let histY = Array.new(histSize);

    let i = 0;

    // initial snake
    while( i < length ) {
      let temp = Point.new((startX - i),startY);    // create a point, setX, Y for point
      let segments[i] = temp;       // save point to the snake segments
      let i = i + 1;
    }

    let head = segments[0]; // ASK is head the pointer to segments[0] or the value of segments[0]? Why error if i put it before setting segments value
    let prevTail = segments[length-1];

    do draw();

    return this; // Return a reference to this newly created object
  }

  /** Sets the Snake's direction */
  method void setDirection(int Adirection) {
    let direction = Adirection;
    return;
  }

  /** Deallocates the object's memory. */
  method void dispose() {
    do segments.dispose();
    do Memory.deAlloc(this);
    return;
  }

  // gets the snake's length
  method int getLength() {
    return length;
  }

  // set new snake segments as it grows
  method void grow() {
    var int i, newlength;
    var Point temp;
    var Array newSegments;

    // copy over previous snake
    // increase segments length
    // new length according to current direction

    let i = 0;
    let newlength = length + 1;
    let newSegments = Array.new(newlength);

    while( i < length ) {
        let temp = segments[i];    // create a point, setX, Y for point
        let newSegments[i] = temp;       // save point to the snake segments
        let i = i + 1;
    }

    let newSegments[newlength -1] = prevTail;
    do drawSnakeBit(prevTail.getX(), prevTail.getY());

    do segments.dispose();        // dispose old segments ASK ??

    let segments = newSegments;   // replace with new
    let length = newlength;

    return;
  }

  // gets the snake's headX
  method int getHead() {
    return head;
  }

  // gets the snake's headX
  method int getHeadX() {
    return head.getX();
  }

  // gets the snake's headY
  method int getHeadY() {
    return head.getY();
  }

  method void drawSnakeBit(int x, int y) {

    do Screen.setColor(true);

    if (((x*4)+4 < 512) | ((y*4)+4 < 256)) {
      do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
    }
    return;
  }

  method void clearSnakeBit(int x, int y) {

    do Screen.setColor(false);

    if (((x*4)+4 < 512) | ((y*4)+4 < 256)) {
      do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
    }
    return;
  }

  // TODO
  method void draw() {
    var int i;
    var Point temp;

    let i = 0;
    // Iterate through each segment of the snake and draw it
    while( i < length ) {
      let temp = segments[i];
      do drawSnakeBit(temp.getX(), temp.getY());
      let i = i + 1;
    }
    return;
  }

  /** check if snake hit the wall */ // limitation: hitwall doesn't work bc pgm exits before display game over.
  method boolean hitWall(int x, int y) {
    if ( ((x*4) > 510) | ((y*4) > 254) | ((x*4)+4 > 510) | ((y*4)+4 > 254)) {
      return true;
    }
  return false;
  }


  method void move() {
    var int i;
    var Point temp;
    var int newX, newY;

    let head = segments[0];
    let newX = head.getX();
    let newY = head.getY();

    let prevTail = segments[(length-1)];

    // Move head in the current direction
    if (direction = 0) {
      let newX = head.getX() + 1;
      } // Right
    if (direction = 1) {
      let newY = head.getY() + 1;
      } // Down
    if (direction = 2) {
      let newX = head.getX() - 1;
      } // Left
    if (direction = 3) {
      let newY = head.getY() - 1;
      } // Up

    // Move the rest of the body by one
    let i = length - 1;
    while (i > 0) {
        let segments[i] = segments[(i - 1)]; // Move each segment to the position of the next
        let i = i - 1;
    }

    // Set new head position
    let temp = Point.new(newX, newY);    // create a point, setX, Y for point
    let segments[0] = temp;
    let head = segments[0];

    // Set color to white to erase the last segment's previous position
    do Screen.setColor(false);
    do clearSnakeBit(prevTail.getX(), prevTail.getY());

    // debugging //
    /**
    let i = length - 1;
    let temp = segments[i];
      do Output.moveCursor(22,7);
      do Output.printInt(temp.getX());
      do Output.moveCursor(22,14);
      do Output.printInt(temp.getY());
      do Sys.wait(5);
    */

    // Now, draw the new head position
    do Screen.setColor(true);
    do drawSnakeBit(head.getX(), head.getY());

    return;
  }


}
