class SnakeGame {
  static SnakeGame instance; // A Pong game

  field Apple apple;
  field Snake snake;
  field boolean exit;       // true when the game is over
  field int score;          // displaying score
  field int level;          // number of apple eaten

  field int cycle;          // game cycle

  field int delay;

  /** Constructs a new snake game. */
  constructor SnakeGame new() {
    do Screen.clearScreen();

    // set random seed here
    do Random.setSeed(RandSeed.getSeed());

    // init game
    let score = 0;
    let level = 1;
    let cycle = 0 ;  // for remembering snake position history
    let exit = false;
    let delay = 50;

    let snake = Snake.new(this, (512/4)/2 , (256/4)/2, 10);    // create Snake (SnakeGame, startX, startY, startLength)
    let apple = Apple.new(snake, 512, 256);
    do apple.put();               // initail apple

    do Output.moveCursor(22,11);
    do Output.printString("Length: ");

    do Output.moveCursor(22,0);
    do Output.printString("Score: 0");

    return this;
  }

  /** ------- Utils --------*/
  /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      do apple.dispose();
      do Memory.deAlloc(this);
      return;
   }

  /** Creates an instance of a Snake game. */
  function void newInstance() {
      let instance = SnakeGame.new();
      return;
  }

  /** Returns this Snake game. */
  function SnakeGame getInstance() {
      return instance;
  }

  /** --- Snake Game Properties ----*/

  method void nextLevel() {

    let score = score + (10 * level);
    let level = level + 1;
    if( delay > 30 ) {
        let delay = delay - 5;
    }

    do Output.moveCursor(22,7);
    do Output.printInt(score);
    return;
    }

  /** -------- Snake Run -----------*/
  /** Starts the game, and handles inputs from the user that control
     *  the Sanke's movement direction. */
  method void run() {
    var char key;
    var Point head;

    while (~exit) {
      if (Keyboard.keyPressed()) {
          let key = Keyboard.keyPressed(); // Update key with the latest input
      }

        // Array keypress, set new direction
        if (key = 132) { do snake.setDirection(0); }       // right
      else {
          if (key = 133) { do snake.setDirection(1); }      // down
        else {
            if (key = 130) { do snake.setDirection(2); }     // left
          else {
              if (key = 131) { do snake.setDirection(3); }    // up
            else {
              if (key = 140) { let exit = true; }
            }
          }
        }
        }

        do snake.move();
        let head = snake.getHead();

        // eat food yet ?

        // try move snake
        do Output.moveCursor(22,19);
          do Output.printInt(snake.getLength());

        if (apple.isEaten(head.getX(), head.getY())) {
          do nextLevel();
          do apple.put();
          do snake.grow();
        }

        if (snake.hitWall(head.getX(), head.getY())) {
          do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
          let exit = true; }


        // ------- Next Cycle ---------

        if (exit) {
          do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	       }

        do Sys.wait(delay);

    }

    return;
  }
}
