// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=instruction, b=outMALU, sel=instruction[15], out=aIn);
    Not(in=instruction[15], out=not15);

    // RegisterA, AddressM
    Or(a=not15, b=instruction[5],out=loadA);
    ARegister(in=aIn, load=loadA, out=outA, out[0..14]=addressM);

    // A/M: instrction[12] == 0, A else load inM
    Mux16(a=outA, b=inM, sel=instruction[12], out=AM);

    // RegisterD
    And(a=instruction[4],b=instruction[15],out=loadD);
	  DRegister(in=outMALU,load=loadD,out=outD);

    ALU(x=outD,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outMALU,out=outM,zr=zr,ng=ng);

    // WriteM
    And(a=instruction[15],b=instruction[3],out=writeM);

    // jump <
    And(a=instruction[15],b=instruction[2],out=jlt);
	  And(a=jlt,b=ng,out=loadPC1);

    // jump ==
    And(a=instruction[15],b=instruction[1],out=jeq);
	  And(a=jeq,b=zr,out=loadPC2);

    // jump >
    Not(in=ng, out=ps);
    Not(in=zr, out=nzr);
    And(a=ps, b=nzr, out=psnzr);
    And(a=instruction[15],b=instruction[0],out=jgt);
    And(a=jgt, b=psnzr, out=loadPC3);

    // jump if at least one jump instruction is true
    Or(a=loadPC1, b=loadPC2, out=loadPC12);
    Or(a=loadPC12, b=loadPC3, out=loadPC); // If load is true, then choose value from A to PC

    // PC is the line to jump to
    PC(in=outA,load=loadPC,inc=true,reset=reset,out[0..14]=pc);
}
